/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ohmk/k8s-edge/pkg/apis/edge/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EdgeNodeLister helps list EdgeNodes.
type EdgeNodeLister interface {
	// List lists all EdgeNodes in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeNode, err error)
	// EdgeNodes returns an object that can list and get EdgeNodes.
	EdgeNodes(namespace string) EdgeNodeNamespaceLister
	EdgeNodeListerExpansion
}

// edgeNodeLister implements the EdgeNodeLister interface.
type edgeNodeLister struct {
	indexer cache.Indexer
}

// NewEdgeNodeLister returns a new EdgeNodeLister.
func NewEdgeNodeLister(indexer cache.Indexer) EdgeNodeLister {
	return &edgeNodeLister{indexer: indexer}
}

// List lists all EdgeNodes in the indexer.
func (s *edgeNodeLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeNode, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeNode))
	})
	return ret, err
}

// EdgeNodes returns an object that can list and get EdgeNodes.
func (s *edgeNodeLister) EdgeNodes(namespace string) EdgeNodeNamespaceLister {
	return edgeNodeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EdgeNodeNamespaceLister helps list and get EdgeNodes.
type EdgeNodeNamespaceLister interface {
	// List lists all EdgeNodes in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.EdgeNode, err error)
	// Get retrieves the EdgeNode from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.EdgeNode, error)
	EdgeNodeNamespaceListerExpansion
}

// edgeNodeNamespaceLister implements the EdgeNodeNamespaceLister
// interface.
type edgeNodeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all EdgeNodes in the indexer for a given namespace.
func (s edgeNodeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.EdgeNode, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.EdgeNode))
	})
	return ret, err
}

// Get retrieves the EdgeNode from the indexer for a given namespace and name.
func (s edgeNodeNamespaceLister) Get(name string) (*v1alpha1.EdgeNode, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("edgenode"), name)
	}
	return obj.(*v1alpha1.EdgeNode), nil
}
